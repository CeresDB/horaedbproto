// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package metaservicepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CeresmetaRpcServiceClient is the client API for CeresmetaRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CeresmetaRpcServiceClient interface {
	AllocSchemaID(ctx context.Context, in *AllocSchemaIdRequest, opts ...grpc.CallOption) (*AllocSchemaIdResponse, error)
	AllocTableID(ctx context.Context, in *AllocTableIdRequest, opts ...grpc.CallOption) (*AllocTableIdResponse, error)
	GetTables(ctx context.Context, in *GetTablesRequest, opts ...grpc.CallOption) (*GetTablesResponse, error)
	DropTable(ctx context.Context, in *DropTableRequest, opts ...grpc.CallOption) (*DropTableResponse, error)
	NodeHeartbeat(ctx context.Context, opts ...grpc.CallOption) (CeresmetaRpcService_NodeHeartbeatClient, error)
}

type ceresmetaRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCeresmetaRpcServiceClient(cc grpc.ClientConnInterface) CeresmetaRpcServiceClient {
	return &ceresmetaRpcServiceClient{cc}
}

func (c *ceresmetaRpcServiceClient) AllocSchemaID(ctx context.Context, in *AllocSchemaIdRequest, opts ...grpc.CallOption) (*AllocSchemaIdResponse, error) {
	out := new(AllocSchemaIdResponse)
	err := c.cc.Invoke(ctx, "/meta_service.CeresmetaRpcService/AllocSchemaID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ceresmetaRpcServiceClient) AllocTableID(ctx context.Context, in *AllocTableIdRequest, opts ...grpc.CallOption) (*AllocTableIdResponse, error) {
	out := new(AllocTableIdResponse)
	err := c.cc.Invoke(ctx, "/meta_service.CeresmetaRpcService/AllocTableID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ceresmetaRpcServiceClient) GetTables(ctx context.Context, in *GetTablesRequest, opts ...grpc.CallOption) (*GetTablesResponse, error) {
	out := new(GetTablesResponse)
	err := c.cc.Invoke(ctx, "/meta_service.CeresmetaRpcService/GetTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ceresmetaRpcServiceClient) DropTable(ctx context.Context, in *DropTableRequest, opts ...grpc.CallOption) (*DropTableResponse, error) {
	out := new(DropTableResponse)
	err := c.cc.Invoke(ctx, "/meta_service.CeresmetaRpcService/DropTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ceresmetaRpcServiceClient) NodeHeartbeat(ctx context.Context, opts ...grpc.CallOption) (CeresmetaRpcService_NodeHeartbeatClient, error) {
	stream, err := c.cc.NewStream(ctx, &CeresmetaRpcService_ServiceDesc.Streams[0], "/meta_service.CeresmetaRpcService/NodeHeartbeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &ceresmetaRpcServiceNodeHeartbeatClient{stream}
	return x, nil
}

type CeresmetaRpcService_NodeHeartbeatClient interface {
	Send(*NodeHeartbeatRequest) error
	Recv() (*NodeHeartbeatResponse, error)
	grpc.ClientStream
}

type ceresmetaRpcServiceNodeHeartbeatClient struct {
	grpc.ClientStream
}

func (x *ceresmetaRpcServiceNodeHeartbeatClient) Send(m *NodeHeartbeatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ceresmetaRpcServiceNodeHeartbeatClient) Recv() (*NodeHeartbeatResponse, error) {
	m := new(NodeHeartbeatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CeresmetaRpcServiceServer is the server API for CeresmetaRpcService service.
// All implementations must embed UnimplementedCeresmetaRpcServiceServer
// for forward compatibility
type CeresmetaRpcServiceServer interface {
	AllocSchemaID(context.Context, *AllocSchemaIdRequest) (*AllocSchemaIdResponse, error)
	AllocTableID(context.Context, *AllocTableIdRequest) (*AllocTableIdResponse, error)
	GetTables(context.Context, *GetTablesRequest) (*GetTablesResponse, error)
	DropTable(context.Context, *DropTableRequest) (*DropTableResponse, error)
	NodeHeartbeat(CeresmetaRpcService_NodeHeartbeatServer) error
	mustEmbedUnimplementedCeresmetaRpcServiceServer()
}

// UnimplementedCeresmetaRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCeresmetaRpcServiceServer struct {
}

func (UnimplementedCeresmetaRpcServiceServer) AllocSchemaID(context.Context, *AllocSchemaIdRequest) (*AllocSchemaIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocSchemaID not implemented")
}
func (UnimplementedCeresmetaRpcServiceServer) AllocTableID(context.Context, *AllocTableIdRequest) (*AllocTableIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocTableID not implemented")
}
func (UnimplementedCeresmetaRpcServiceServer) GetTables(context.Context, *GetTablesRequest) (*GetTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTables not implemented")
}
func (UnimplementedCeresmetaRpcServiceServer) DropTable(context.Context, *DropTableRequest) (*DropTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropTable not implemented")
}
func (UnimplementedCeresmetaRpcServiceServer) NodeHeartbeat(CeresmetaRpcService_NodeHeartbeatServer) error {
	return status.Errorf(codes.Unimplemented, "method NodeHeartbeat not implemented")
}
func (UnimplementedCeresmetaRpcServiceServer) mustEmbedUnimplementedCeresmetaRpcServiceServer() {}

// UnsafeCeresmetaRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CeresmetaRpcServiceServer will
// result in compilation errors.
type UnsafeCeresmetaRpcServiceServer interface {
	mustEmbedUnimplementedCeresmetaRpcServiceServer()
}

func RegisterCeresmetaRpcServiceServer(s grpc.ServiceRegistrar, srv CeresmetaRpcServiceServer) {
	s.RegisterService(&CeresmetaRpcService_ServiceDesc, srv)
}

func _CeresmetaRpcService_AllocSchemaID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocSchemaIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeresmetaRpcServiceServer).AllocSchemaID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta_service.CeresmetaRpcService/AllocSchemaID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeresmetaRpcServiceServer).AllocSchemaID(ctx, req.(*AllocSchemaIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeresmetaRpcService_AllocTableID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocTableIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeresmetaRpcServiceServer).AllocTableID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta_service.CeresmetaRpcService/AllocTableID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeresmetaRpcServiceServer).AllocTableID(ctx, req.(*AllocTableIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeresmetaRpcService_GetTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeresmetaRpcServiceServer).GetTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta_service.CeresmetaRpcService/GetTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeresmetaRpcServiceServer).GetTables(ctx, req.(*GetTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeresmetaRpcService_DropTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeresmetaRpcServiceServer).DropTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta_service.CeresmetaRpcService/DropTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeresmetaRpcServiceServer).DropTable(ctx, req.(*DropTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CeresmetaRpcService_NodeHeartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CeresmetaRpcServiceServer).NodeHeartbeat(&ceresmetaRpcServiceNodeHeartbeatServer{stream})
}

type CeresmetaRpcService_NodeHeartbeatServer interface {
	Send(*NodeHeartbeatResponse) error
	Recv() (*NodeHeartbeatRequest, error)
	grpc.ServerStream
}

type ceresmetaRpcServiceNodeHeartbeatServer struct {
	grpc.ServerStream
}

func (x *ceresmetaRpcServiceNodeHeartbeatServer) Send(m *NodeHeartbeatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ceresmetaRpcServiceNodeHeartbeatServer) Recv() (*NodeHeartbeatRequest, error) {
	m := new(NodeHeartbeatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CeresmetaRpcService_ServiceDesc is the grpc.ServiceDesc for CeresmetaRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CeresmetaRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meta_service.CeresmetaRpcService",
	HandlerType: (*CeresmetaRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllocSchemaID",
			Handler:    _CeresmetaRpcService_AllocSchemaID_Handler,
		},
		{
			MethodName: "AllocTableID",
			Handler:    _CeresmetaRpcService_AllocTableID_Handler,
		},
		{
			MethodName: "GetTables",
			Handler:    _CeresmetaRpcService_GetTables_Handler,
		},
		{
			MethodName: "DropTable",
			Handler:    _CeresmetaRpcService_DropTable_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NodeHeartbeat",
			Handler:       _CeresmetaRpcService_NodeHeartbeat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "meta_service.proto",
}

// CeresmetaForwardRpcServiceClient is the client API for CeresmetaForwardRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CeresmetaForwardRpcServiceClient interface {
	SignalAllNodeHeartbeat(ctx context.Context, in *SignalAllNodeHeartbeatRequest, opts ...grpc.CallOption) (*SignalAllNodeHeartbeatResponse, error)
}

type ceresmetaForwardRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCeresmetaForwardRpcServiceClient(cc grpc.ClientConnInterface) CeresmetaForwardRpcServiceClient {
	return &ceresmetaForwardRpcServiceClient{cc}
}

func (c *ceresmetaForwardRpcServiceClient) SignalAllNodeHeartbeat(ctx context.Context, in *SignalAllNodeHeartbeatRequest, opts ...grpc.CallOption) (*SignalAllNodeHeartbeatResponse, error) {
	out := new(SignalAllNodeHeartbeatResponse)
	err := c.cc.Invoke(ctx, "/meta_service.CeresmetaForwardRpcService/signalAllNodeHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CeresmetaForwardRpcServiceServer is the server API for CeresmetaForwardRpcService service.
// All implementations must embed UnimplementedCeresmetaForwardRpcServiceServer
// for forward compatibility
type CeresmetaForwardRpcServiceServer interface {
	SignalAllNodeHeartbeat(context.Context, *SignalAllNodeHeartbeatRequest) (*SignalAllNodeHeartbeatResponse, error)
	mustEmbedUnimplementedCeresmetaForwardRpcServiceServer()
}

// UnimplementedCeresmetaForwardRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCeresmetaForwardRpcServiceServer struct {
}

func (UnimplementedCeresmetaForwardRpcServiceServer) SignalAllNodeHeartbeat(context.Context, *SignalAllNodeHeartbeatRequest) (*SignalAllNodeHeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalAllNodeHeartbeat not implemented")
}
func (UnimplementedCeresmetaForwardRpcServiceServer) mustEmbedUnimplementedCeresmetaForwardRpcServiceServer() {
}

// UnsafeCeresmetaForwardRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CeresmetaForwardRpcServiceServer will
// result in compilation errors.
type UnsafeCeresmetaForwardRpcServiceServer interface {
	mustEmbedUnimplementedCeresmetaForwardRpcServiceServer()
}

func RegisterCeresmetaForwardRpcServiceServer(s grpc.ServiceRegistrar, srv CeresmetaForwardRpcServiceServer) {
	s.RegisterService(&CeresmetaForwardRpcService_ServiceDesc, srv)
}

func _CeresmetaForwardRpcService_SignalAllNodeHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalAllNodeHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CeresmetaForwardRpcServiceServer).SignalAllNodeHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta_service.CeresmetaForwardRpcService/signalAllNodeHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CeresmetaForwardRpcServiceServer).SignalAllNodeHeartbeat(ctx, req.(*SignalAllNodeHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CeresmetaForwardRpcService_ServiceDesc is the grpc.ServiceDesc for CeresmetaForwardRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CeresmetaForwardRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meta_service.CeresmetaForwardRpcService",
	HandlerType: (*CeresmetaForwardRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "signalAllNodeHeartbeat",
			Handler:    _CeresmetaForwardRpcService_SignalAllNodeHeartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meta_service.proto",
}
