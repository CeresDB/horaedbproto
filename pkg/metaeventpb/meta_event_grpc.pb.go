// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: meta_event.proto

package metaeventpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetaEventServiceClient is the client API for MetaEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetaEventServiceClient interface {
	OpenShards(ctx context.Context, in *OpenShardsRequest, opts ...grpc.CallOption) (*OpenShardsResponse, error)
	CloseShards(ctx context.Context, in *CloseShardsRequest, opts ...grpc.CallOption) (*CloseShardsResponse, error)
	SplitShard(ctx context.Context, in *SplitShardRequest, opts ...grpc.CallOption) (*SplitShardResponse, error)
	MergeShards(ctx context.Context, in *MergeShardsRequest, opts ...grpc.CallOption) (*MergeShardsResponse, error)
	ChangeShardRole(ctx context.Context, in *ChangeShardRoleRequest, opts ...grpc.CallOption) (*ChangeShardRoleResponse, error)
}

type metaEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaEventServiceClient(cc grpc.ClientConnInterface) MetaEventServiceClient {
	return &metaEventServiceClient{cc}
}

func (c *metaEventServiceClient) OpenShards(ctx context.Context, in *OpenShardsRequest, opts ...grpc.CallOption) (*OpenShardsResponse, error) {
	out := new(OpenShardsResponse)
	err := c.cc.Invoke(ctx, "/meta_event.MetaEventService/OpenShards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaEventServiceClient) CloseShards(ctx context.Context, in *CloseShardsRequest, opts ...grpc.CallOption) (*CloseShardsResponse, error) {
	out := new(CloseShardsResponse)
	err := c.cc.Invoke(ctx, "/meta_event.MetaEventService/CloseShards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaEventServiceClient) SplitShard(ctx context.Context, in *SplitShardRequest, opts ...grpc.CallOption) (*SplitShardResponse, error) {
	out := new(SplitShardResponse)
	err := c.cc.Invoke(ctx, "/meta_event.MetaEventService/SplitShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaEventServiceClient) MergeShards(ctx context.Context, in *MergeShardsRequest, opts ...grpc.CallOption) (*MergeShardsResponse, error) {
	out := new(MergeShardsResponse)
	err := c.cc.Invoke(ctx, "/meta_event.MetaEventService/MergeShards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaEventServiceClient) ChangeShardRole(ctx context.Context, in *ChangeShardRoleRequest, opts ...grpc.CallOption) (*ChangeShardRoleResponse, error) {
	out := new(ChangeShardRoleResponse)
	err := c.cc.Invoke(ctx, "/meta_event.MetaEventService/ChangeShardRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaEventServiceServer is the server API for MetaEventService service.
// All implementations must embed UnimplementedMetaEventServiceServer
// for forward compatibility
type MetaEventServiceServer interface {
	OpenShards(context.Context, *OpenShardsRequest) (*OpenShardsResponse, error)
	CloseShards(context.Context, *CloseShardsRequest) (*CloseShardsResponse, error)
	SplitShard(context.Context, *SplitShardRequest) (*SplitShardResponse, error)
	MergeShards(context.Context, *MergeShardsRequest) (*MergeShardsResponse, error)
	ChangeShardRole(context.Context, *ChangeShardRoleRequest) (*ChangeShardRoleResponse, error)
	mustEmbedUnimplementedMetaEventServiceServer()
}

// UnimplementedMetaEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetaEventServiceServer struct {
}

func (UnimplementedMetaEventServiceServer) OpenShards(context.Context, *OpenShardsRequest) (*OpenShardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenShards not implemented")
}
func (UnimplementedMetaEventServiceServer) CloseShards(context.Context, *CloseShardsRequest) (*CloseShardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseShards not implemented")
}
func (UnimplementedMetaEventServiceServer) SplitShard(context.Context, *SplitShardRequest) (*SplitShardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SplitShard not implemented")
}
func (UnimplementedMetaEventServiceServer) MergeShards(context.Context, *MergeShardsRequest) (*MergeShardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeShards not implemented")
}
func (UnimplementedMetaEventServiceServer) ChangeShardRole(context.Context, *ChangeShardRoleRequest) (*ChangeShardRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeShardRole not implemented")
}
func (UnimplementedMetaEventServiceServer) mustEmbedUnimplementedMetaEventServiceServer() {}

// UnsafeMetaEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaEventServiceServer will
// result in compilation errors.
type UnsafeMetaEventServiceServer interface {
	mustEmbedUnimplementedMetaEventServiceServer()
}

func RegisterMetaEventServiceServer(s grpc.ServiceRegistrar, srv MetaEventServiceServer) {
	s.RegisterService(&MetaEventService_ServiceDesc, srv)
}

func _MetaEventService_OpenShards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenShardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaEventServiceServer).OpenShards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta_event.MetaEventService/OpenShards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaEventServiceServer).OpenShards(ctx, req.(*OpenShardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaEventService_CloseShards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseShardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaEventServiceServer).CloseShards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta_event.MetaEventService/CloseShards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaEventServiceServer).CloseShards(ctx, req.(*CloseShardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaEventService_SplitShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SplitShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaEventServiceServer).SplitShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta_event.MetaEventService/SplitShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaEventServiceServer).SplitShard(ctx, req.(*SplitShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaEventService_MergeShards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeShardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaEventServiceServer).MergeShards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta_event.MetaEventService/MergeShards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaEventServiceServer).MergeShards(ctx, req.(*MergeShardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaEventService_ChangeShardRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeShardRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaEventServiceServer).ChangeShardRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta_event.MetaEventService/ChangeShardRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaEventServiceServer).ChangeShardRole(ctx, req.(*ChangeShardRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetaEventService_ServiceDesc is the grpc.ServiceDesc for MetaEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetaEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meta_event.MetaEventService",
	HandlerType: (*MetaEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenShards",
			Handler:    _MetaEventService_OpenShards_Handler,
		},
		{
			MethodName: "CloseShards",
			Handler:    _MetaEventService_CloseShards_Handler,
		},
		{
			MethodName: "SplitShard",
			Handler:    _MetaEventService_SplitShard_Handler,
		},
		{
			MethodName: "MergeShards",
			Handler:    _MetaEventService_MergeShards_Handler,
		},
		{
			MethodName: "ChangeShardRole",
			Handler:    _MetaEventService_ChangeShardRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meta_event.proto",
}
